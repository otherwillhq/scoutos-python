from __future__ import annotations

from typing import TYPE_CHECKING, Sequence

from typing_extensions import TypedDict

if TYPE_CHECKING:  # pragma: no cover
    from openai.types.chat import ChatCompletionMessageParam  # pragma: no cover


class Choice(TypedDict):
    """A single choice of completion generated by the generative service."""

    finish_reason: str
    index: int
    message: ChatCompletionMessageParam


class Usage(TypedDict):
    """Usage information for the interaction.

    This is used to monitor costs.
    """

    input_tokens: int
    output_tokens: int


class GenerativeOutput(TypedDict):
    """Output from the Generative Block."""

    id: str
    model: str
    usage: Usage | None
    choices: Sequence[Choice]


class GenerativeInput(TypedDict):
    """Input for the run method in a Generative block."""

    messages: Sequence[ChatCompletionMessageParam]
